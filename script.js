// =======================================
// –ö–∞—Å—Ç–æ–º–Ω—ã–π Date Picker
// =======================================

let currentDate = new Date();
let selectedDate = null;
let highlightCount = 1;

const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
                    '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];

// –î–æ–∂–¥–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {

const dateDisplay = document.getElementById('dateDisplay');
const dateText = document.getElementById('dateText');
const customDatePicker = document.getElementById('customDatePicker');
const datePickerDays = document.getElementById('datePickerDays');
const currentMonthYear = document.getElementById('currentMonthYear');
const prevMonthBtn = document.getElementById('prevMonth');
const nextMonthBtn = document.getElementById('nextMonth');
const todayBtn = document.getElementById('todayBtn');
const yesterdayBtn = document.getElementById('yesterdayBtn');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const today = new Date();
selectDate(today);

// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
dateDisplay.addEventListener('click', function() {
    const isVisible = customDatePicker.style.display === 'block';
    customDatePicker.style.display = isVisible ? 'none' : 'block';
    if (!isVisible) renderCalendar();
});

// –ó–∞–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
document.addEventListener('click', function(e) {
    if (!e.target.closest('.date-picker-wrapper')) {
        customDatePicker.style.display = 'none';
    }
});

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
prevMonthBtn.addEventListener('click', function() {
    currentDate.setMonth(currentDate.getMonth() - 1);
    renderCalendar();
});

nextMonthBtn.addEventListener('click', function() {
    currentDate.setMonth(currentDate.getMonth() + 1);
    renderCalendar();
});

// –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
todayBtn.addEventListener('click', function() {
    selectDate(new Date());
});

yesterdayBtn.addEventListener('click', function() {
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    selectDate(yesterday);
});

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function renderCalendar() {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    currentMonthYear.textContent = `${monthNames[month]} ${year}`;
    
    // –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0)
    let startDayOfWeek = firstDay.getDay();
    startDayOfWeek = startDayOfWeek === 0 ? 6 : startDayOfWeek - 1;
    
    datePickerDays.innerHTML = '';
    
    // –î–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const prevMonthLastDay = new Date(year, month, 0).getDate();
    for (let i = startDayOfWeek - 1; i >= 0; i--) {
        const day = prevMonthLastDay - i;
        const cell = createDayCell(day, true);
        datePickerDays.appendChild(cell);
    }
    
    // –î–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for (let day = 1; day <= lastDay.getDate(); day++) {
        const cell = createDayCell(day, false);
        const cellDate = new Date(year, month, day);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        const today = new Date();
        if (cellDate.toDateString() === today.toDateString()) {
            cell.classList.add('today');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        if (selectedDate && cellDate.toDateString() === selectedDate.toDateString()) {
            cell.classList.add('selected');
        }
        
        cell.addEventListener('click', function() {
            selectDate(new Date(year, month, day));
        });
        
        datePickerDays.appendChild(cell);
    }
    
    // –î–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const totalCells = datePickerDays.children.length;
    const remainingCells = 42 - totalCells; // 6 –Ω–µ–¥–µ–ª—å * 7 –¥–Ω–µ–π
    for (let day = 1; day <= remainingCells; day++) {
        const cell = createDayCell(day, true);
        datePickerDays.appendChild(cell);
    }
}

function createDayCell(day, isOtherMonth) {
    const cell = document.createElement('div');
    cell.className = 'day-cell';
    if (isOtherMonth) cell.classList.add('other-month');
    cell.textContent = day;
    return cell;
}

function selectDate(date) {
    selectedDate = date;
    currentDate = new Date(date);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∫–∞–∫ –¥–µ–Ω—å.–º–µ—Å—è—Ü
    const day = date.getDate();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const formattedDate = `${day}.${month}`;
    dateText.textContent = formattedDate;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
    document.getElementById('dateOfMeeting').value = date.toISOString().split('T')[0];
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    customDatePicker.style.display = 'none';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    updateProgress();
}

// =======================================
// –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
// =======================================

function updateProgress() {
    const form = document.getElementById('dateReviewForm');
    
    const missingItems = [];
    
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–±–µ–∑ —Ö–∞–π–ª–∞–π—Ç–æ–≤ –∏ —Ç–µ–≥–æ–≤)
    const requiredFields = form.querySelectorAll('[required]');
    let totalRequired = 0;
    let filledRequired = 0;
    
    requiredFields.forEach(field => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—è —Ö–∞–π–ª–∞–π—Ç–æ–≤ –∏ —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è —Ç–µ–≥–æ–≤
        if (field.name && (field.name.startsWith('highlight_') || 
            ['communication', 'attention', 'chemistry', 'sex', 'emotions'].includes(field.name))) {
            return;
        }
        
        totalRequired++;
        
        if (field.type === 'hidden') {
            if (field.value && field.value !== '0') {
                filledRequired++;
            } else {
                if (field.name === 'dateOfMeeting') missingItems.push('–î–∞—Ç–∞ —Å–≤–∏–¥–∞–Ω–∏—è');
                if (field.name === 'rating') missingItems.push('–û—Ü–µ–Ω–∫–∞ –∑–≤–µ–∑–¥–∞–º–∏');
            }
        } else if (field.value.trim() !== '') {
            filledRequired++;
        } else {
            const label = field.previousElementSibling?.textContent || field.name;
            missingItems.push(label.replace(' *', ''));
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥–∏ - –º–∏–Ω–∏–º—É–º 4 –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const tagGroups = [
        { id: 'communication', name: 'üó£ –û–±—â–µ–Ω–∏–µ' },
        { id: 'attention', name: 'ü§ù –í–Ω–∏–º–∞–Ω–∏–µ –∏ –º–∞–Ω–µ—Ä—ã' },
        { id: 'chemistry', name: 'üî• –•–∏–º–∏—è' },
        { id: 'sex', name: 'üíã –°–µ–∫—Å/–ò–Ω—Ç–∏–º' },
        { id: 'emotions', name: 'üé≠ –≠–º–æ—Ü–∏–∏' }
    ];
    
    let totalTagsProgress = 0;
    tagGroups.forEach(group => {
        const field = document.getElementById(group.id);
        const tagsCount = field.value ? field.value.split(',').length : 0;
        const groupProgress = Math.min(tagsCount / 4, 1);
        totalTagsProgress += groupProgress;
        
        if (tagsCount < 4) {
            missingItems.push(`${group.name}: ${tagsCount}/4 —Ç–µ–≥–æ–≤`);
        }
    });
    
    // –°—á–∏—Ç–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ö–∞–π–ª–∞–π—Ç—ã
    let filledHighlights = 0;
    for (let i = 1; i <= highlightCount; i++) {
        const highlight = document.querySelector(`[name="highlight_${i}"]`);
        if (highlight && highlight.value.trim() !== '') {
            filledHighlights++;
        }
    }
    
    if (filledHighlights < 3) {
        missingItems.push(`‚ú® –•–∞–π–ª–∞–π—Ç—ã: ${filledHighlights}/3`);
    }
    
    // –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:
    // 40% - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–¥–∞—Ç–∞, –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è, —á—Ç–æ —Ö–æ—Ä–æ—à–æ, —á—Ç–æ –ª—É—á—à–µ, –æ—Ü–µ–Ω–∫–∞)
    // 40% - —Ç–µ–≥–∏ (5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ 4 —Ç–µ–≥–∞)
    // 20% - —Ö–∞–π–ª–∞–π—Ç—ã (–º–∏–Ω–∏–º—É–º 3)
    const requiredProgress = (filledRequired / totalRequired) * 0.4;
    const tagsProgress = (totalTagsProgress / tagGroups.length) * 0.4;
    const highlightsProgress = Math.min(filledHighlights / 3, 1) * 0.2;
    
    const totalProgress = Math.round((requiredProgress + tagsProgress + highlightsProgress) * 100);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä—É–≥–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    const progressCircle = document.getElementById('progressCircle');
    const circumference = 2 * Math.PI * 36;
    const offset = circumference - (totalProgress / 100) * circumference;
    progressCircle.style.strokeDashoffset = offset;
    
    document.getElementById('progressText').textContent = totalProgress + '%';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º tooltip
    const tooltipList = document.getElementById('tooltipList');
    const modalTooltipList = document.getElementById('modalTooltipList');
    
    const tooltipHTML = missingItems.length === 0 
        ? '<li class="completed">–í—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ! üéâ</li>'
        : missingItems.map(item => `<li>${item}</li>`).join('');
    
    if (tooltipList) {
        tooltipList.innerHTML = tooltipHTML;
    }
    if (modalTooltipList) {
        modalTooltipList.innerHTML = tooltipHTML;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    const mobileProgressBar = document.getElementById('mobileProgressBar');
    const mobileProgressText = document.getElementById('mobileProgressText');
    if (mobileProgressBar) {
        mobileProgressBar.style.width = totalProgress + '%';
    }
    if (mobileProgressText) {
        mobileProgressText.textContent = totalProgress + '%';
    }
}

// –°–∏—Å—Ç–µ–º–∞ —Ç–µ–≥–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º (–∫–∞–∫ –≤ Tinder)
const tagContainers = document.querySelectorAll('.tag-container');
const selectedTags = {}; // –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º

tagContainers.forEach(container => {
    const group = container.dataset.group;
    selectedTags[group] = [];
    
    const tags = container.querySelectorAll('.tag');
    
    tags.forEach(tag => {
        tag.addEventListener('click', function() {
            const value = this.dataset.value;
            
            if (this.classList.contains('selected')) {
                // –£–±–∏—Ä–∞–µ–º –≤—ã–±–æ—Ä
                this.classList.remove('selected');
                selectedTags[group] = selectedTags[group].filter(t => t !== value);
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä
                this.classList.add('selected');
                selectedTags[group].push(value);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
            document.getElementById(group).value = selectedTags[group].join(', ');
            updateProgress();
        });
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
const customInputs = document.querySelectorAll('.custom-tag-input');

customInputs.forEach(input => {
    input.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            const value = this.value.trim();
            const group = this.dataset.group;
            
            if (value) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥
                const container = this.previousElementSibling;
                const newTag = document.createElement('button');
                newTag.type = 'button';
                newTag.className = 'tag selected';
                newTag.dataset.value = value;
                newTag.textContent = value;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                container.appendChild(newTag);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
                selectedTags[group].push(value);
                document.getElementById(group).value = selectedTags[group].join(', ');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞
                newTag.addEventListener('click', function() {
                    if (this.classList.contains('selected')) {
                        this.classList.remove('selected');
                        selectedTags[group] = selectedTags[group].filter(t => t !== value);
                    } else {
                        this.classList.add('selected');
                        selectedTags[group].push(value);
                    }
                    document.getElementById(group).value = selectedTags[group].join(', ');
                    updateProgress();
                });
                
                // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                this.value = '';
                updateProgress();
            }
        }
    });
});

// –†–µ–π—Ç–∏–Ω–≥ –∑–≤–µ–∑–¥–∞–º–∏
let currentRating = 0;
const stars = document.querySelectorAll('.star');
const ratingInput = document.getElementById('rating');
const ratingDisplay = document.getElementById('ratingValue');

stars.forEach(star => {
    star.addEventListener('click', function() {
        currentRating = parseFloat(this.dataset.rating);
        updateStars(currentRating);
        ratingInput.value = currentRating;
        ratingDisplay.textContent = currentRating.toFixed(1);
        updateProgress();
    });
    
    star.addEventListener('mouseover', function() {
        const hoverRating = parseFloat(this.dataset.rating);
        updateStars(hoverRating);
        ratingDisplay.textContent = hoverRating.toFixed(1);
    });
});

document.getElementById('starRating').addEventListener('mouseleave', function() {
    updateStars(currentRating);
    ratingDisplay.textContent = currentRating > 0 ? currentRating.toFixed(1) : '0';
});

function updateStars(rating) {
    stars.forEach(star => {
        const starValue = parseFloat(star.dataset.rating);
        star.classList.remove('active', 'half');
        
        if (starValue <= rating) {
            star.classList.add('active');
        }
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ö–∞–π–ª–∞–π—Ç–æ–≤
document.getElementById('addHighlight').addEventListener('click', function() {
    highlightCount++;
    const container = document.getElementById('highlightsContainer');
    const textarea = document.createElement('textarea');
    textarea.name = `highlight_${highlightCount}`;
    textarea.className = 'highlight-textarea';
    textarea.placeholder = '–ù–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å...';
    container.appendChild(textarea);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
    textarea.addEventListener('input', updateProgress);
});

// –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
document.querySelectorAll('input, textarea').forEach(field => {
    field.addEventListener('input', updateProgress);
});

// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
updateProgress();

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–º–æ–±–∏–ª—å–Ω—ã–µ)
const mobileProgressHeader = document.getElementById('mobileProgressHeader');
const progressModal = document.getElementById('progressModal');
const modalClose = document.getElementById('modalClose');

if (mobileProgressHeader) {
    mobileProgressHeader.addEventListener('click', function() {
        progressModal.classList.add('active');
    });
}

if (modalClose) {
    modalClose.addEventListener('click', function() {
        progressModal.classList.remove('active');
    });
}

if (progressModal) {
    progressModal.addEventListener('click', function(e) {
        if (e.target === progressModal) {
            progressModal.classList.remove('active');
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendToTelegram(message) {
    const config = window.TELEGRAM_CONFIG;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (!config || 
        config.TELEGRAM_BOT_TOKEN === 'YOUR_BOT_TOKEN_HERE' || 
        config.TELEGRAM_CHAT_ID === 'YOUR_CHAT_ID_HERE') {
        throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ Chat ID –≤ —Ñ–∞–π–ª–µ config.js');
    }
    
    const url = `https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    const response = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            chat_id: config.TELEGRAM_CHAT_ID,
            text: message,
            parse_mode: 'HTML'
        })
    });
    
    if (!response.ok) {
        const error = await response.json();
        throw new Error(error.description || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
    }
    
    return await response.json();
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
document.getElementById('dateReviewForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    if (currentRating === 0) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É!');
        return;
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    const submitBtn = this.querySelector('.submit-btn');
    submitBtn.disabled = true;
    submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
    
    try {
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const formData = new FormData(this);
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ö–∞–π–ª–∞–π—Ç—ã
        const highlights = [];
        for (let i = 1; i <= highlightCount; i++) {
            const highlight = formData.get(`highlight_${i}`);
            if (highlight && highlight.trim()) {
                highlights.push(highlight);
            }
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        const dateValue = formData.get('dateOfMeeting');
        const dateObj = new Date(dateValue);
        const formattedDate = dateObj.toLocaleDateString('ru-RU', { 
            day: 'numeric', 
            month: 'long', 
            year: 'numeric' 
        });
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
        const stars = '‚≠ê'.repeat(Math.round(currentRating));
        const message = `
<b>üíú –û–¢–ó–´–í –ù–ê –°–í–ò–î–ê–ù–ò–ï</b>
<b>üìÖ –î–∞—Ç–∞ —Å–≤–∏–¥–∞–Ω–∏—è:</b> ${formattedDate}

<b>üìù –ö–ê–ö –≠–¢–û –ë–´–õ–û?</b>
${escapeHtml(formData.get('impression'))}

<b>üí≠ –ú–û–ú–ï–ù–¢–´:</b>
üó£ –û–±—â–µ–Ω–∏–µ: ${escapeHtml(formData.get('communication')) || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
ü§ù –í–Ω–∏–º–∞–Ω–∏–µ –∏ –º–∞–Ω–µ—Ä—ã: ${escapeHtml(formData.get('attention')) || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üî• –•–∏–º–∏—è: ${escapeHtml(formData.get('chemistry')) || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üíã –°–µ–∫—Å / –ò–Ω—Ç–∏–º: ${escapeHtml(formData.get('sex')) || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üé≠ –≠–º–æ—Ü–∏–∏ –ø–æ—Å–ª–µ: ${escapeHtml(formData.get('emotions')) || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

<b>‚ú® –•–ê–ô–õ–ê–ô–¢–´:</b>
${highlights.map((h, i) => `${i + 1}. ${escapeHtml(h)}`).join('\n')}

<b>üëç –ß–¢–û –ë–´–õ–û –•–û–†–û–®–û:</b>
${escapeHtml(formData.get('good'))}

<b>üëé –ß–¢–û –ú–û–ì–õ–û –ë–´–¢–¨ –õ–£–ß–®–ï:</b>
${escapeHtml(formData.get('better'))}

<b>‚≠ê –û–¶–ï–ù–ö–ê:</b> ${stars} (${currentRating}/5.0)

<i>üìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}</i>
        `.trim();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        await sendToTelegram(message);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        document.getElementById('dateReviewForm').style.display = 'none';
        document.getElementById('successMessage').style.display = 'block';
        
    } catch (error) {
        alert('–û—à–∏–±–∫–∞: ' + error.message);
        console.error(error);
        submitBtn.disabled = false;
        submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML –≤ Telegram
function escapeHtml(text) {
    if (!text) return '';
    return text
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}

// –ó–∞–∫—Ä—ã–≤–∞–µ–º DOMContentLoaded
}); // –∫–æ–Ω–µ—Ü DOMContentLoaded